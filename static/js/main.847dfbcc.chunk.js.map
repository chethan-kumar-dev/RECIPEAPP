{"version":3,"sources":["recipe.js","App.js","reportWebVitals.js","index.js"],"names":["Recipe","title","calories","image","ingredients","className","map","ing","text","Math","random","src","alt","App","useState","rec","updateRec","search","setSearch","query","updateQuery","URL","useEffect","getRec","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","style","color","textAlign","val","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6PAEe,SAASA,EAAT,GAAqD,IAApCC,EAAmC,EAAnCA,MAAMC,EAA6B,EAA7BA,SAASC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,YACnD,OACC,qBAAKC,UAAU,YAAf,SACG,sBAAoBA,UAAU,UAA9B,UACA,6BAAKJ,IACL,4CAAeC,KACf,6CACA,6BACIE,EAAYE,KAAI,SAAAC,GAAG,OAAE,6BAAyBA,EAAIC,MAApBC,KAAKC,eAEvC,qBAAKC,IAAKR,EAAOS,IAAI,KACrB,yBARUV,K,MC4CDW,MA9Cf,WACC,IADc,EAIOC,mBAAS,IAJhB,mBAIRC,EAJQ,KAIJC,EAJI,OAKUF,mBAAS,IALnB,mBAKRG,EALQ,KAKDC,EALC,OAMWJ,mBAAS,WANpB,mBAMRK,EANQ,KAMFC,EANE,KAOTC,EAAI,mCAAD,OAAoCF,EAApC,mBANG,WAMH,oBALI,oCAYbG,qBAAU,WACVC,MAEE,CAACJ,IACF,IAAOI,EAAM,uCAAC,8BAAAC,EAAA,sEACSC,MAAMJ,GADf,cACNK,EADM,gBAEKA,EAASC,OAFd,OAENC,EAFM,OAGZZ,EAAUY,EAAKC,MAHH,2CAAD,qDAKb,OACE,qBAAKxB,UAAU,iBAAf,SACE,uBAAMA,UAAU,cAAcyB,SAhBjC,SAAgBC,GACdA,EAAEC,iBACFZ,EAAYH,GACZC,EAAU,KAaT,UACC,qBAAKb,UAAU,IAAf,SACA,sBAAKA,UAAU,QAAf,UACM,uBAAO4B,KAAK,OAAOC,MAAOjB,EAAQkB,SAAU,SAACJ,GAAD,OAAKb,EAAUa,EAAEK,OAAOF,UACpE,wBAAQD,KAAK,SAAb,yBAGN,oBAAII,MAAO,CAACC,MAAM,QAAQC,UAAU,UAApC,wBAEGxB,EAAIT,KAAI,SAAAkC,GAAG,OACZ,cAACxC,EAAD,CAEEC,MAAOuC,EAAIC,OAAOC,MAClBxC,SAAUsC,EAAIC,OAAOvC,SACrBC,MAAOqC,EAAIC,OAAOtC,MAClBC,YAAaoC,EAAIC,OAAOrC,aAJnBoC,EAAIC,OAAOvC,mBC3BXyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.847dfbcc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Recipe({title,calories,image,ingredients}) {\r\n  return (\r\n   <div className=\"flex-cont\">\r\n      <div key={calories} className=\"div-ele\">\r\n      <h1>{title}</h1>\r\n      <p>calories : {calories}</p>\r\n      <h3>preparation</h3>\r\n      <ul>\r\n         {ingredients.map(ing=><li key={Math.random()}>{ing.text}</li>)}\r\n      </ul>\r\n      <img src={image} alt=''></img>\r\n      <hr></hr>\r\n    </div>\r\n   </div>\r\n   \r\n  )\r\n}\r\n","import React, { useEffect,useState } from 'react';\nimport Recipe from \"./recipe\";\nimport \"./App.css\";\nfunction App() {\n let APP_ID=\"6f4e7a8c\";\n let APP_KEY=\"3f7991425bbeb9fcd12f1f11ae6a75fa\";\n\n  let [rec,updateRec]=useState([]);\n  let [search,setSearch]=useState(\"\");\n  let [query,updateQuery]=useState(\"chicken\");\n  let URL=`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`;\n\n  function handle(e){\n    e.preventDefault();\n    updateQuery(search);\n    setSearch(\"\");\n  }\nuseEffect(()=>{\ngetRec();\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[query])\n const  getRec=async()=>{\n   const response=await fetch(URL);\n   const data=await response.json();\n   updateRec(data.hits);\n }\n return(\n   <div className='form-container'>\n     <form className='search-form' onSubmit={handle}>\n      <div className=\"a\">\n      <div className=\"input\">\n            <input type=\"text\" value={search} onChange={(e)=>setSearch(e.target.value)}></input>\n            <button type=\"submit\" >search</button>\n       </div>\n      </div>\n      <h2 style={{color:\"black\",textAlign:'center'}}>RECIPE APP</h2>\n      \n        {rec.map(val=>\n        <Recipe \n          key={val.recipe.calories}\n          title={val.recipe.label}\n          calories={val.recipe.calories}\n          image={val.recipe.image}\n          ingredients={val.recipe.ingredients}\n          ></Recipe>)} \n     </form>\n   </div>\n )\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}